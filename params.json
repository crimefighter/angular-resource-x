{"name":"$resource_","tagline":"AngularJS Resource Extension","body":"# Angular ResourceGenerator\r\nAngularJS Resource Extension\r\n\r\n## About\r\nResource Generator wraps a call to $resource and provides some extra functionality. The provider can be configured with a base API URL, default parameters, extenders, methods and statics.\r\n\r\nWhile $resource is amazing in itself, we wanted to provide a more declarative approach to $resource management. Typically if you wanted more functions out of your resources, you'd have to create a service that instantiated a resource and then managed the resource with methods on that service. Resource Generator creates one stop call for both your $resource and its management.\r\n\r\nHere's how your resource definition might look like:\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}, [\r\n  {\r\n    'name': 'owners',\r\n    'url': 'owners/:id/',\r\n    'params': {'id':'@id'},\r\n    'link': {'car_id', 'id'}\r\n  }\r\n])\r\n  .method('paint', function(color){\r\n    this.color = color;\r\n    return this.$save();\r\n  }\r\n  .method('turnOn', function(){\r\n    this.on = true;\r\n  });\r\n  \r\nvar camaro = new Cars();\r\ncamaro.paint('yellow');\r\n```\r\n\r\n### Configuration\r\nThe ResourceGenerator provider takes in 4 arguments:\r\n- `url`: the URL to get this resource from.\r\n- `paramDefaults`: the hash of parameter defaults for this resource, exactly like $resource. Will also take a function that returns an object.\r\n- `children`: child endpoints. Configured like so:\r\n```javascript\r\n  {\r\n    //A name for your child endpoint.\r\n    'name': 'owners', \r\n    //URL for this endpoint.\r\n    'url': 'carowners/{id}', \r\n    //Exactly like the parent, will take an object or a function that returns an object.\r\n    'params': {'id':'@id'}, \r\n    //Object that has as a key a query field on this child and as a value a variable name to fetch from its parent.\r\n    'link': {'car_id', 'id'} \r\n  }\r\n```\r\n\r\n## Usage\r\nTo simply create a standard $resource just call ResourceGenerator with only the first 2 parameters:\r\n```javascript\r\n//creates a Cars resource and binds the \"id\" query field to the object's id\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'});\r\n```\r\nAs you can expect, a $resource is returned pointing to the cars endpoint and matches the id url query field with the object's id.\r\n\r\nChildren endpoints are automatically added to the instance of the parent's resource. Like so:\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}, [\r\n  {\r\n    'name': 'owners',\r\n    'url': 'owners/:id/',\r\n    'params': {'id':'@id'},\r\n    'link': {'car_id', 'id'}\r\n  }\r\n]);\r\n\r\n//now when we get an instance of Car we also get some helper variables:\r\nvar prius = Cars.get({'id':1});\r\nvar priusOwners;\r\n\r\n//we wait for the car to be fetched\r\nprius.$promise.then(function(){\r\n  //$owners automatically get added to prius with their \"car_id\" query param set to the prius' id.\r\n  priusOwners = prius.$owners.query();\r\n});\r\n```\r\n\r\n### Methods\r\nMethods allow the manipulation of resource instantiated with your resource-generator. Example:\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}).method('paint', function(color){\r\n  this.color = color;\r\n  return this.$save();\r\n}\r\n\r\n//then anywhere you want to use the Cars\r\nvar prius = new Cars();\r\nprius.paint('blue');\r\n```\r\n\r\n### Statics\r\nStatics (static methods) however, work in the non-instantiated ResourceGenerator, like so:\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}).static('getAllRedCars', function(){\r\n  return this.query({color:'red'});\r\n}\r\n\r\n//now to get that list of red cars you call\r\nvar redCars = Cars.getAllRedCars();\r\n```\r\n\r\n### Extends\r\nExtends are simply _both_ a method and a static - as in they work on both instantiated and non-instantiated versions of your resource object.\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}).extend('toggleIgnition', function(car){\r\n  var useCar = (this.id) ? this : car;\r\n  //toggle between on/off\r\n  useCar.on = !useCar.on;\r\n  \r\n  return useCar.$save();\r\n}\r\n\r\n//now we can use that method with an instantiated Car\r\nvar prius = new Cars({'name':'prius'});\r\n//turn car on\r\nprius.toggleIgnition();\r\n//and turn it back off, using the non-instantiated Cars\r\nCars.toggleIgnition(prius);\r\n```\r\n\r\n### Other Helper Stuff\r\n\r\n#### Function Params\r\nYou can use a function in place of default params that returns the params. This function is $injected but only when called, so it's safe to set up during the config phase of your app. Like so:\r\n```javascript\r\n//modifying the default params in this case, but this works for any time you pass in a parameters list\r\n//In this example, I want to attach a user's login role to all calls made from my resources.\r\nResourceGeneratorProvider.defaults.params = function(RolesService){\r\n  if(RolesService.myRole){\r\n    return {'user_role': RolesService.myRole};\r\n  }\r\n}\r\n```\r\n\r\n#### GetWithChildren()\r\nGetWithChildren() is a default method for all ResourceGenerators. It will parallel load all of the resource's childrens and save their result to the resource. Like so:\r\n```javascript\r\nvar Cars = ResourceGenerator('cars/:id/', {'id':'@id'}, [\r\n  {\r\n    'name': 'owners',\r\n    'url': 'owners/:id/',\r\n    'params': {'id':'@id'},\r\n    'link': {'car_id', 'id'}\r\n  }\r\n]);\r\n\r\nvar prius = Cars.getWithChildren({'id':5});\r\nvar priusOwners;\r\n\r\nprius.$promise.then(function(){\r\n  priusOwners = prius._owners;\r\n});\r\n```\r\n\r\n\r\n  \r\n    \r\n    \r\n","google":"UA-61246315-1","note":"Don't delete this file! It's used internally to help with page regeneration."}